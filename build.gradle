buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.liquibase:liquibase-core:4.29.2'
    }
}

plugins {
    id 'io.spring.dependency-management' version '1.1.6'
    id 'java'
    id 'nu.studer.jooq' version '9.0'
    id 'org.springframework.boot' version '3.4.0'
    id 'org.liquibase.gradle' version '2.2.2'
}

group = 'pl.sg'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(23)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    implementation 'org.liquibase:liquibase-core:4.29.2'

    runtimeOnly 'com.h2database:h2:2.3.232'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    jooqGenerator 'com.h2database:h2:2.3.232'

    liquibaseRuntime 'org.liquibase:liquibase-core:4.29.2'
    liquibaseRuntime 'org.liquibase:liquibase-groovy-dsl:4.0.0'
    liquibaseRuntime 'info.picocli:picocli:4.7.6'
    liquibaseRuntime 'com.h2database:h2:2.3.232'
}

tasks.named('test') {
    useJUnitPlatform()
}

jooq {
    configurations {
        main {
            generationTool {
                jdbc {
                    driver = 'org.h2.Driver'
                    url = 'jdbc:h2:file:./data/demo'
                    user = 'sa'
                    password = 'password'
                }
                generator {
                    name = 'org.jooq.codegen.JavaGenerator'
                    database {
                        inputSchema = 'PUBLIC'
                        forcedTypes {
                            forcedType {
                                name = 'varchar'
                                includeExpression = '.*'
                                includeTypes = 'JSONB?'
                            }
                            forcedType {
                                name = 'varchar'
                                includeExpression = '.*'
                                includeTypes = 'INET'
                            }
                        }
                    }
                    target {
                        packageName = "pl.sg.jooq"
                    }
                }
            }
        }
    }
}

liquibase {
    activities {
        main {
            changelogFile 'src/main/resources/db/changelog/db.changelog-master.yaml'
            driver 'org.h2.Driver'
            url 'jdbc:h2:file:./data/demo'
            username 'sa'
            password 'password'
        }
    }
    runList = 'main'
}

clean.doFirst {
    delete "${rootDir}/data"
}

build.dependsOn(generateJooq)
generateJooq.dependsOn(update)